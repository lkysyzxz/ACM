#include<iostream>
#include<algorithm>
using namespace std;
void heapAdjust(int i,int l);
void insertNumber(int x, int pos);
struct node{
	int left;
	int right;
};
int num[10] = { 0, 3, 1, 3, 7, 5, 2, 4 };
node father[10];//father[i] 表示 第i个节点的子节点
void BuildHeap(int n){
	for (int i = 1; i <= n / 2; i++){
		father[i].left = 2 * i;
		father[i].right = 2 * i + 1;
	}
	for (int i = n / 2; i >= 1; i--){
		heapAdjust(i,n);
	}
}

void heapAdjust(int i,int r){//对节点i进行调整
	int child;
	while (2 * i <= r){
		//调整思想是自顶向下调整
		//调整效率与深度有关系 与长度无关
		//交换是child和i交换
		//也就是说  交换i child 然后 以child 为父节点 继续调整以它为根的子树
		child = 2 * i ;
		if (child <= r - 1 && num[child] < num[child + 1])
			child++;

		if (num[i] < num[child]){
			int temp = num[i];
			num[i] = num[child];
			num[child] = temp;
		}

		i = child;
	}
}

void insertNumber(int x, int pos){
	num[pos] = x;
	int fa = pos / 2;
	if (pos & 1)
		father[fa].right = pos;
	else
		father[fa].left = pos;
	for (int i = fa; i >= 1; i/=2){//自底向上调整， 效率为堆的深度
		heapAdjust(i, pos);
	}
}
int main(){

	BuildHeap(7);
	int len = 7;
	insertNumber(8, ++len);
	insertNumber(9, ++len);
	
	return 0;
}
